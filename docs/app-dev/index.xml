<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>App Development on</title><link>https://onshape-public.github.io/docs/app-dev/</link><description>Recent content in App Development on</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Mon, 18 May 2020 20:44:05 -0400</lastBuildDate><atom:link href="https://onshape-public.github.io/docs/app-dev/index.xml" rel="self" type="application/rss+xml"/><item><title>Extensions</title><link>https://onshape-public.github.io/docs/app-dev/extensions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onshape-public.github.io/docs/app-dev/extensions/</guid><description>&lt;p>This page provides information for some of the more common options for
embedding a third-party application into the Onshape interface. Onshape provides many options for embedding commands in various menus, fly-out panels, and elements. In this example, you will embed a custom web page inside a document’s right side fly-out panel. This interface will receive information from Onshape and push information from the panel back to Onshape, providing a complete, bi-directional integration scenario.&lt;/p></description></item><item><title>Client Messaging</title><link>https://onshape-public.github.io/docs/app-dev/clientmessaging/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onshape-public.github.io/docs/app-dev/clientmessaging/</guid><description>&lt;p>Application extensions and the Onshape JavaScript web client need to communicate directly, calling across the iframe containing the application extension using post message.
&lt;img src="https://onshape-public.github.io/images/extension-right-panel-02.png" alt="image alt text">&lt;/p>
&lt;hr>
&lt;h2 id="message-initiation">Message initiation&lt;/h2>
&lt;p>Onshape client messaging can be split into those that are initiated from the &lt;em>application extension&lt;/em> and those that are initiated from the &lt;em>Onshape client&lt;/em>.&lt;/p>
&lt;h3 id="messages-from-the-extension">Messages from the extension&lt;/h3>
&lt;p>These client messages can be initiated from the application extension:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Click/close flyouts events&lt;/strong>: Notify the Onshape client that the user has clicked in the application extension, which should cause Onshape flyouts (versions, history, uploads, etc.) and dropdown menus (profile dropdown menu, document menu) to close. Without this, flyouts and menus might remain open over the application extension.&lt;/li>
&lt;li>&lt;strong>Shortcut keyboard events&lt;/strong>: Shortcut keys (such as &lt;code>?&lt;/code>, which opens the Onshape Help dialog), can be handled by the application extension by posting a message to the Onshape client to open the dialog.&lt;/li>
&lt;li>&lt;strong>keepAlive&lt;/strong>: Notify the Onshape client that the user is actively working in the application extension, which triggers the Onshape client to send a message to the server to keep the browser session alive. Without this, the Onshape browser session will timeout and ask the user to sign in again.&lt;/li>
&lt;li>&lt;strong>Standard Onshape dialogs&lt;/strong>: Request from the application extension to the Onshape client to open one of the Onshape standard dialogs and send the user’s choices back to the application extension. For example, if the application extension needs the user to choose a part or assembly to be operated on, the application extension can post a message to the Onshape client requesting that dialog be opened and the selected part or assembly information sent back to the application extension.&lt;/li>
&lt;li>&lt;strong>UI customization&lt;/strong>&amp;quot;: Request from the application extension to the Onshape client to customize the Onshape UI (e.g., add commands to menus, add buttons to the toolbars, etc). When these commands or toolbar buttons are clicked, the Onshape client posts a message to the application extension with the available context.
&lt;ul>
&lt;li>&lt;strong>Note&lt;/strong>: This is limited to cases where the application extension is made active by the user; application extensions are not automatically loaded when a document is opened. Most UI customizations should be done when you register the application with Onshape, as those change the Onshape client automatically without needing to load the application extension first.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Content/material insertion&lt;/strong>: Request from the application extension to insert content into the Onshape document. For example, insert a part into a new or existing Part Studio, apply a material to a part, add a material to a material library, etc.&lt;/li>
&lt;/ul>
&lt;h3 id="messages-from-onshape">Messages from Onshape&lt;/h3>
&lt;p>The following messages can be initiated from the Onshape client:&lt;/p></description></item><item><title>Structured Storage</title><link>https://onshape-public.github.io/docs/app-dev/structuredstorage/</link><pubDate>Mon, 18 May 2020 20:40:16 -0400</pubDate><guid>https://onshape-public.github.io/docs/app-dev/structuredstorage/</guid><description>&lt;h2 id="sub-elements">Sub Elements&lt;/h2>
&lt;p>Onshape provides application elements storage that is controlled by applications through the API. These elements allow a set of named sub-elements.&lt;/p>
&lt;p>The application can make changes to sub-elements independently or in arbitrary groupings. Changes may be wholesale replacements, or may be deltas. When performing a delta update, the application may post a full version as well, which allows the api to return a smaller number of deltas for subsequent queries.&lt;/p></description></item><item><title>Webhooks</title><link>https://onshape-public.github.io/docs/app-dev/webhook/</link><pubDate>Mon, 18 May 2020 20:44:05 -0400</pubDate><guid>https://onshape-public.github.io/docs/app-dev/webhook/</guid><description>&lt;p>This page describes the Webhook APIs Onshape provides for working with notifications.&lt;/p>
&lt;p>Notifications are delivered to an application as an HTTP &lt;code>POST&lt;/code> with a JSON body, which includes information about the identity of the registration request and information specific to the event and notification message.&lt;/p>
&lt;p>Webhooks are an alternative approach to polling; instead of your application continuously asking Onshape for new information, webhooks automatically send a notification from Onshape any time an event you are subscribed to occurs.&lt;/p></description></item></channel></rss>